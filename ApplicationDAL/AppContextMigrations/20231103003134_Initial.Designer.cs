// <auto-generated />

#nullable disable

using ApplicationDAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

namespace ApplicationDAL.AppContextMigrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231103003134_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ApplicationDAL.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("FieldOfStudy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<string>("LevelOfEducation")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)");

                    b.Property<DateOnly>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.EmployerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmployerAccounts");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Interview", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("JobSeekerAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("JobId", "JobSeekerAccountId");

                    b.HasIndex("JobSeekerAccountId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Benefits")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployerAccountId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("JobTypes")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumberOfOpenings")
                        .HasColumnType("int");

                    b.Property<bool>("ResumeRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Schedule")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployerAccountId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.JobApply", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("JobSeekerAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("JobId", "JobSeekerAccountId");

                    b.HasIndex("JobSeekerAccountId");

                    b.ToTable("JobApplies");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.JobSeekerAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("JobSeekerAccounts");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Resume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JobSeekerAccountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerAccountId")
                        .IsUnique();

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.SavedJob", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("JobSeekerAccountId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("JobId", "JobSeekerAccountId");

                    b.HasIndex("JobSeekerAccountId");

                    b.ToTable("SavedJobs");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityOrProvince")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<bool>("CurrentlyWorkHere")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ResumeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime(6)");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("ResumeId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Education", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Resume", "Resume")
                        .WithMany("Educations")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.EmployerAccount", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Organization", "Organization")
                        .WithOne("EmployerAccount")
                        .HasForeignKey("ApplicationDAL.Entities.EmployerAccount", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDAL.Entities.User", "User")
                        .WithOne("EmployerAccount")
                        .HasForeignKey("ApplicationDAL.Entities.EmployerAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Interview", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Job", "Job")
                        .WithMany("Interviews")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDAL.Entities.JobSeekerAccount", "JobSeekerAccount")
                        .WithMany("Interviews")
                        .HasForeignKey("JobSeekerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeekerAccount");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Job", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.EmployerAccount", "EmployerAccount")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployerAccount");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.JobApply", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Job", "Job")
                        .WithMany("JobApplies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDAL.Entities.JobSeekerAccount", "JobSeekerAccount")
                        .WithMany("JobApplies")
                        .HasForeignKey("JobSeekerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeekerAccount");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.JobSeekerAccount", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDAL.Entities.User", "User")
                        .WithOne("JobSeekerAccount")
                        .HasForeignKey("ApplicationDAL.Entities.JobSeekerAccount", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Resume", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.JobSeekerAccount", "JobSeekerAccount")
                        .WithOne("Resume")
                        .HasForeignKey("ApplicationDAL.Entities.Resume", "JobSeekerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeekerAccount");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.SavedJob", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationDAL.Entities.JobSeekerAccount", "JobSeekerAccount")
                        .WithMany("SavedJobs")
                        .HasForeignKey("JobSeekerAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeekerAccount");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Skill", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Resume", "Resume")
                        .WithMany("Skills")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.WorkExperience", b =>
                {
                    b.HasOne("ApplicationDAL.Entities.Resume", "Resume")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.EmployerAccount", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Job", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("JobApplies");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.JobSeekerAccount", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("JobApplies");

                    b.Navigation("Resume")
                        .IsRequired();

                    b.Navigation("SavedJobs");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Organization", b =>
                {
                    b.Navigation("EmployerAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationDAL.Entities.Resume", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Skills");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("ApplicationDAL.Entities.User", b =>
                {
                    b.Navigation("EmployerAccount")
                        .IsRequired();

                    b.Navigation("JobSeekerAccount")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
